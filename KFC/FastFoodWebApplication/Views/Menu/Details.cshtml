@using KFCApplication.Services;
@using System.Globalization;
@model KFCApplication.Models.Dish

@await Html.PartialAsync("_HeadPartial")

@{
    var image = "/images/f1.png";
    if (Model.DishImage != null)
    {
        string img = Model.DishImage.Replace("\\", "/");
        image = "/" + img;
    }
}

<div class="detail-center">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-4">
                <img src="@image" class="dish-image"></img>
            </div>
            <div class="col-6">
                <h1 class="dish-name">@Html.DisplayFor(model => model.Name)</h1>
                <h5 class="dish-price text-danger">
                    @{
                        var price = string.Format(new CultureInfo("vi-VN"), "{0:C}", Model.DishPrice);
                    }
                    @price
                </h5>
                <div class="dish-description">
                    <h5>@Html.DisplayFor(model => model.Description)</h5>
                </div>
                <div class="size-options">
                    @{
                        var totalSizeS = string.Format(new CultureInfo("vi-VN"), "{0:C}", Model.DishPrice);
                        var sizeM = Model.DishPrice * 0.4m;
                        var totalSizeM = string.Format(new CultureInfo("vi-VN"), "{0:C}", Model.DishPrice + sizeM);
                        var sizeL = Model.DishPrice * 0.8m;
                        var totalSizeL = string.Format(new CultureInfo("vi-VN"), "{0:C}", Model.DishPrice + sizeL);
                    }
                    <form method="post" asp-controller="Carts" asp-action="Create">
                        <input type="hidden" name="DishID" value="@Model.DishId" />
                        <label>Choose a size:</label>
                        <div class="size-options-container">
                            <input type="radio" name="size" id="sizeS" value="S" onchange="changeDishSize('@Model.DishId', this)" checked>
                            <label for="sizeS">S - @totalSizeS</label>

                            <input type="radio" name="size" id="sizeM" value="M" onchange="changeDishSize('@Model.DishId', this)">
                            <label for="sizeM">M - @totalSizeM</label>

                            <input type="radio" name="size" id="sizeL" value="L" onchange="changeDishSize('@Model.DishId', this)">
                            <label for="sizeL">L - @totalSizeL</label>
                        </div>
                        <div class="quantity-controls">
                            <button type="button" class="quantity-btn" onclick="adjustQuantity('@Model.DishId', 'down',this)">-</button>
                            <input name="quantity" value="1" id="quantity_@Model.DishId" class="quantity-input" data-price="@Model.DishPrice" readonly />
                            <button type="button" class="quantity-btn" onclick="adjustQuantity('@Model.DishId', 'up',this)">+</button>
                        </div>
                        <input type="hidden" id="basePrice_@Model.DishId" value="@price" />
                        <div class="options">
                            @if (Model.DishStatus == 0)
                            {

                                <button id="soldOutLink1" type="submit" class="btn btn-danger cart-button">
                                    Buy Now
                                </button>
                            }
                            else
                            {
                                <button type="submit" class="btn btn-danger cart-button">
                                    Buy Now
                                </button>
                            }
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .detail-center {
        padding: 20px;
    }

    .dish-image {
        width: 100%;
        max-width: 300px;
    }

    .dish-name {
        font-size: 2em;
        margin-bottom: 10px;
    }

    .dish-price {
        font-size: 1.5em;
        color: red;
    }

    .dish-description {
        margin-bottom: 20px;
    }

    .size-options {
        margin-bottom: 20px;
    }

        .size-options label {
            display: block;
            margin-bottom: 10px;
        }

    .size-options-container label {
        display: inline-block;
        margin-right: 20px;
        cursor: pointer;
        line-height: 20px;
        position: relative;
        padding-left: 30px;
    }

    .size-options-container input[type="radio"]:checked + label:before {
        background-color: blue;
        border-color: blue;
    }

    .size-options-container label:before {
        content: '';
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        width: 20px;
        height: 20px;
        border: 1px solid #000;
        background-color: #fff;
        border-radius: 50%;
    }

    .quantity-controls {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
    }

    .quantity-btn {
        background-color: #f8f9fa;
        border: 1px solid #ced4da;
        padding: 5px 10px;
        cursor: pointer;
    }

    .quantity-input {
        text-align: center;
        width: 50px;
        border: 1px solid #ced4da;
        margin: 0 5px;
    }

    .btn-danger {
        background-color: #d9534f;
        border: none;
        color: white;
        padding: 10px 20px;
        cursor: pointer;
    }
</style>


<script>
    function adjustQuantity(productId, direction, ele) {
        var quantityElement = $('#quantity_' + productId);
        var currentQuantity = parseInt(quantityElement.val());

        if (direction === 'up') {
            quantityElement.val(currentQuantity + 1);
        } else if (direction === 'down' && currentQuantity > 1) {
            quantityElement.val(currentQuantity - 1);
        }

        updatePrice(productId);
    }
    function changeDishSize(productId, ele) {
        var newSize = $(ele).val();
        var basePrice = parseFloat($('#basePrice_' + productId).val()); // Get the base price

        var updatedPrice = calculateUpdatedPrice(newSize, basePrice);
        var priceElement = $('#price_' + productId);
    }
    function calculateUpdatedPrice(size, basePrice) {
        var sizePrice = 0;

        if (size === 'M') {
            sizePrice = basePrice * 0.4;
        } else if (size === 'L') {
            sizePrice = basePrice * 0.8;
        }

        return (basePrice + sizePrice);
    }
    function updatePrice(productId) {
        var newSize = $("input[name='size']:checked").val();
        var basePrice = parseFloat($('#basePrice_' + productId).val());
        var quantity = parseInt($('#quantity_' + productId).val());

        var updatedPrice = calculateUpdatedPrice(newSize, basePrice) * quantity;
    }

    $('form').submit(function () {
        console.log('Form submitted!');
    });
    $('input[name="size"]').change(function () {
        var productId = '@Model.DishId';
        updatePrice(productId);
    });
    var soldOutLink = document.getElementById("soldOutLink");

    // Add a click event listener
    soldOutLink.addEventListener("click", function (event) {
        // Prevent the default behavior of the link
        event.preventDefault();

        // Perform any actions you want when the link is clicked
        alert("This dish is sold out!");
    });

    var soldOutLink = document.getElementById("soldOutLink1");

    soldOutLink.addEventListener("click", function (event) {

        event.preventDefault();

        alert("This dish is sold out!");
    });
</script>

@using System.Globalization;
@await Html.PartialAsync("_HeadPartial")
@using X.PagedList.Mvc
@using X.PagedList.Mvc.Core;
@using X.PagedList;
@model PaginatedList<KFCApplication.Models.Dish>
@{

    // Retrieve the Dishes from ViewData
    var dishes = ViewData["Dishes"] as IPagedList<Dish>;
    List<DishType> types = ViewData["DishType"] as List<DishType>;
    List<Voucher> vouchers = ViewData["Code"] as List<Voucher>;
    int? active = ViewData["active"] as int?;
    var dishSizes = ViewBag.DishSizes as IEnumerable<DishSize>;
    var sizes = new[] { new { Value = "S", Text = "S" },
    new { Value = "M", Text = "M" }, new { Value = "L", Text = "L" } };

}
@* @foreach(var item in vouchers)
{
    <h1>@item.Name</h1>
    <h1>@item.Code</h1>
    <input type="hidden" value="@item.ID">

} *@

<section class="food_section ">
    <div class="container">
        <div class="row">
            <div class="col-8"></div>
            <div class="col-4 Card">
                <div class="CardInner">
                    <div class="container">
                        <form method="get" action="@Url.Action("Index", "Menu")">
                            <div class="row" style="margin-top: 20px">
                                <div class="col-2 Icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#657789" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"><circle cx="11" cy="11" r="8" /><line x1="21" y1="21" x2="16.65" y2="16.65" /></svg>
                                </div>
                                <div class="col-9    InputContainer">
                                    <input type="text" name="searchString" value="@ViewData["searchString"]" placeholder="Searching..." />
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="container-dropdown ">
            <div class="row">
                <div class="col-10"></div>
                <div class="col-2 dropdown-container text-right">
                    <button style="border: 0; background-color: white;">
                        <a href="@Url.Action("Index", new { sortOrder = ViewBag.PriceSortParam })" style="display: flex; align-items: center; padding: 10px; margin: 5px">
                            <span style="font-size: 18px;padding: 7px;">Price</span>
                            <svg xmlns="http://www.w3.org/2000/svg" height="16" width="10" viewBox="0 0 320 512">< - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--><path d="M137.4 41.4c12.5-12.5 32.8-12.5 45.3 0l128 128c9.2 9.2 11.9 22.9 6.9 34.9s-16.6 19.8-29.6 19.8H32c-12.9 0-24.6-7.8-29.6-19.8s-2.2-25.7 6.9-34.9l128-128zm0 429.3l-128-128c-9.2-9.2-11.9-22.9-6.9-34.9s16.6-19.8 29.6-19.8H288c12.9 0 24.6 7.8 29.6 19.8s2.2 25.7-6.9 34.9l-128 128c-12.5 12.5-32.8 12.5-45.3 0z" /></svg>
                        </a>
                    </button>
                </div>
            </div>
        </div>

        @* <div class="heading_container heading_center">
            <h2 style="font-family: 'Open Sans'; color:#007BFF;">
                Menu
            </h2>
        </div> *@

        <ul class="filters_menu">
            <a asp-action="Index" asp-controller="Menu" asp-route-DishTypeId="null">
            <li class="@((active == null) ? "active" : "")" data-filter="*">
                <span style="text-transform: uppercase; font-weight: bold;">All</span>
            </li></a>
            @foreach (var type in types)
            {
                <a asp-action="Index" asp-controller="Menu" asp-route-DishTypeId="@type.Id">
                <li class="@((type.Id == active) ? "active" : "")" data-filter=".@type.Name">
                    <span style="text-transform: uppercase; font-weight: bold;">@type.Name</span>
                </li>
                </a>
            }
        </ul>

        <div class="filters-content">
            <div class="row grid">
                @if (dishes != null && dishes.Any())
                {
                    @foreach (var dish in dishes)
                    {
                        var image = "/images/f1.png";
                        if (dish.DishImage != null)
                        {
                            string img = dish.DishImage.Replace("\\", "/");
                            image = "/" + img;
                        }
                        var price = string.Format(new CultureInfo("vi-VN"), "{0:C}", dish.DishPrice);
                        <div class="col-sm-6 col-lg-4 all @dish.DishType.Name">
                            <div class="box">
                                <div style="height:419px; background-color: Darkred; ">
                                    <a asp-action="Details" asp-route-id="@dish.DishId">
                                        <div class="img-box" style="border-radius:0;">
                                            @if (dish.DishStatus == 0)
                                            {
                                                <img src="/images/soldout.png" alt="Sold Out">

                                            }
                                            else
                                            {
                                                <img src="@image" alt="">
                                            }
                                        </div>
                                    </a>
                                    <div class="detail-box">
                                        <h5>
                                            @dish.Name
                                        </h5>
                                        <p class="description">
                                            @dish.Description
                                            @* <a asp-controller="" class="read-more" onclick="toggleDescription(this)">Read more</a> *@
                                        </p>
                                        @{
                                            var sizeM = dish.DishPrice * 0.4m;
                                            var totalSizeM = string.Format(new CultureInfo("vi-VN"), "{0:C}", dish.DishPrice + sizeM);
                                            var sizeL = dish.DishPrice * 0.8m;
                                            var totalSizeL = string.Format(new CultureInfo("vi-VN"), "{0:C}", dish.DishPrice + sizeL);

                                        }
                                        <form method="post" asp-controller="Carts" asp-action="Create">
                                            <input type="hidden" name="DishID" value="@dish.DishId" />
                                            <a for="size" style="color: white">Size: </a>
                                            <select name="size" id="size" onchange="changeDishSize('@dish.DishId', this)">
                                                <option value="S">S - @price</option>
                                                <option value="M">M - @totalSizeM</option>
                                                <option value="L">L - @totalSizeL</option>

                                            </select>
                                            <input type="hidden" id="basePrice_@dish.DishId" value="@price" />

                                            <div class="options">

                                                <h6 id="price_@dish.DishId">
                                                    @price
                                                </h6>
                                                @if (dish.DishStatus == 0)
                                                {
                                                    <button id="soldOutLink" style="border:none; background:none; margin-bottom: 10px;" class="cart-button">
                                                        <img src="/images/addtocart.png" alt="cart" style="width: 70px; height: 70px;">
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button type="submit" style="border:none; background:none; margin-bottom: 10px;" class="cart-button">
                                                        <img src="/images/addtocart.png" alt="cart" style="width: 70px; height: 70px;">
                                                    </button>
                                                }

                                            </div>
                                        </form>
                                    </div>

                                </div>

                            </div>
                        </div>

                    }
                }
                else
                {
                    <p>No dishes available.</p>
                }
            </div>

            <div class="pager-container">
                @if (ViewData["Dishes"] is IPagedList<Dish>
                pagedList)
                {
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center">
                            @if (pagedList.HasPreviousPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { page = pagedList.PageNumber - 1, DishTypeId = ViewData["active"], searchString = ViewData["searchString"], sortOrder = ViewBag.PriceSortParam })" aria-label="Previous">
                                        <span aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" height="16" width="10" viewBox="0 0 320 512">< - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--><path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l192 192c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256 246.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192z" /></svg></span>
                                    </a>
                                </li>
                            }

                            @for (int i = 1; i <= pagedList.PageCount; i++)
                            {
                                <li class="page-item @(i == pagedList.PageNumber ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new { page = i, DishTypeId = ViewData["active"], searchString = ViewData["searchString"], sortOrder = ViewBag.PriceSortParam })">
                                        @i
                                    </a>
                                </li>
                            }

                            @if (pagedList.HasNextPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { page = pagedList.PageNumber + 1, DishTypeId = ViewData["active"], searchString = ViewData["searchString"], sortOrder = ViewBag.PriceSortParam })" aria-label="Next">
                                        <span aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" height="16" width="10" viewBox="0 0 320 512">< - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--><path d="M310.6 233.4c12.5 12.5 12.5 32.8 0 45.3l-192 192c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L242.7 256 73.4 86.6c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l192 192z" /></svg></span>
                                    </a>
                                </li>
                            }
                        </ul>
                    </nav>
                }
            </div>
        </div>
    </div>
</section>
<style>
    .pager-container {
        display: flex;
        justify-content: center;
        margin-top: 20px; /* Adjust as needed */
    }

    .btn-secondary {
        color: white;
        background-color: black;
        border-color: black;
        margin-top: -2px;
    }

    .cart-button {
        position: absolute;
        bottom: 0; /* Adjust as needed */
        right: 0; /* Adjust as needed */
    }

/*     .container-dropdown {
        margin-bottom: 50px;
    } */

    .dropdown-container {
        position: relative;
        display: flex;
        justify-content: flex-end;
    }

    .filters_menu {
        display: flex;
        justify-content: center;
        list-style: none;
        padding: 0;
        margin: 20px 0;
    }

        .filters_menu li {
            margin: 0 10px;
            cursor: pointer;
        }

            .filters_menu li.active span {
                color: red;
            }

    .select-container {
        position: relative;
        display: inline-block;
        width: 60%;
    }

    select {
        width: 60%;
        padding: 5px 10px;
        font-size: 16px;
        color: #333;
        border: 2px solid #ccc;
        border-radius: 4px;
        appearance: none;
        background-color: #fff;
        background-image: url("data:image/svg+xml;charset=US-ASCII,%3csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3e%3cpath fill='none' stroke='%23333' stroke-width='3' stroke-linecap='round' stroke-linejoin='round' d='M6 9l6 6 6-6'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 10px center;
        cursor: pointer;
    }

        select:hover {
            border-color: #888;
        }

        select:focus {
            border-color: #555;
            outline: none;
        }

        select option {
            padding: 10px;
            background-color: #fff;
            color: #333;
            cursor: pointer;
        }

            select option:hover {
                background-color: #eee;
            }

            select option:focus {
                background-color: #ddd;
            }


</style>

<script src="/js/jquery-3.4.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous">
</script>
<!-- bootstrap js -->
<script src="/js/bootstrap.js"></script>
<!-- owl slider -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js">
</script>
<!-- isotope js -->
<script src="https://unpkg.com/isotope-layout@3.0.4/dist/isotope.pkgd.min.js"></script>
<!-- nice select -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-nice-select/1.1.0/js/jquery.nice-select.min.js"></script>
<!-- custom js -->
<script src="/js/custom.js"></script>
<!-- Google Map -->
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCh39n5U-4IoWpsVGUHWdqB6puEkhRLdmI&callback=myMap">
</script>
<!-- End Google Map -->
<script>
    function toggleDescription(link) {
        var description = $(link).prev(".description");

        if (description.hasClass("collapsed")) {
            description.removeClass("collapsed");
            link.innerText = "Read less";
        } else {
            description.addClass("collapsed");
            link.innerText = "Read more";
        }
    }
    //     var newSize = $(ele).val();
    // }
    function changeDishSize(productId, ele) {
        var newSize = $(ele).val();
        var basePrice = parseFloat($('#basePrice_' + productId).val()); // Get the base price

        var updatedPrice = calculateUpdatedPrice(newSize, basePrice);


        var priceElement = $('#price_' + productId);
        priceElement.html(updatedPrice*1000 + " đ");

        // Set the value of the hidden input field temporarily
        $('#priceInput_' + productId).val(updatedPrice);
    }

    // Calculate the updated price based on the size
    function calculateUpdatedPrice(size, basePrice) {
        var sizePrice = 0;

        if (size === 'M') {
            sizePrice = basePrice * 0.4;
        } else if (size === 'L') {
            sizePrice = basePrice * 0.8;
        }

        return basePrice + sizePrice;
    }
    $('form').submit(function () {
        console.log('Form submitted!');
        // Add more console.log statements to display values
    });

    var soldOutLink = document.getElementById("soldOutLink");

    // Add a click event listener
    soldOutLink.addEventListener("click", function (event) {
        // Prevent the default behavior of the link
        event.preventDefault();

        // Perform any actions you want when the link is clicked
        alert("This dish is sold out!");
        // You can also perform additional actions here, such as updating the UI
        // to visually indicate that the dish is sold out.
    });

</script>
<style>
    .description {
        position: relative;
        overflow: hidden;
        max-height: 3.6em; /* (2 lines * line-height) + padding */
        line-height: 1.8em; /* Set line height based on your design */
    }

        .description.collapsed {
            max-height: 3.6em; /* Keep the same max-height when collapsed */
        }

    .read-more {
        color: #007bff;
        cursor: pointer;
        display: block;
        margin-top: 5px;
    }





    * {
        -webkit-font-smoothing: antialiased;
        /* color: #acbdce; */
    }

    :root {
        --border-radius: 10px;
    }

    .Card {
        padding: 1px;
        border-radius: var(--border-radius);
        background: linear-gradient(-67deg, rgba(#c8d8e7, .7), rgba(255,255,255,.8));
        overflow: hidden;
        box-shadow: -2px -2px 6px rgba(#fff, .6), 2px 2px 12px #c8d8e7;
        width: 380px;
    }

    .CardInner {
        background-color: #e2e9f4;
        border-radius: var(--border-radius);
    }



    .Icon {
        min-width: 46px;
        min-height: 46px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: var(--border-radius);
        margin-right: 12px;
        box-shadow: -2px -2px 6px rgba(#fff, .6), 2px 2px 12px #c8d8e7;
        svg

    {
        transform: translate(-1px, -1px);
    }

    }

    label {
        font-family: "Hind", sans-serif;
        /*  display: block; */
        /*   color: #3c4b66; */
        /*         margin-bottom: 12px; */
        background: linear-gradient(45deg, rgba(#6b7b8f, 1), #3c4b66);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .InputContainer {
        width: 100%;
    }

    input {
        background-color: #e3edf7;
        padding: 16px 32px;
        border: none;
        display: block;
        font-family: 'Orbitron', sans-serif;
        font-weight: 600;
        color: #a9b8c9;
        -webkit-appearance: none;
        transition: all 240ms ease-out;
        width: 100%;
        &::placeholder

    {
        color: #6d7f8f;
    }

    &:focus {
        outline: none;
        color: #6d7f8f;
        background-color: lighten(#e3edf7, 3%);
    }

    .InputContainer {
        --top-shadow: inset 1px 1px 3px #c5d4e3, inset 2px 2px 6px #c5d4e3;
        --bottom-shadow: inset -2px -2px 4px rgba(255,255,255, .7);
        position: relative;
        border-radius: var(--border-radius);
        overflow: hidden;
        &:before, &:after

    {
        left: 0;
        top: 0;
        display: block;
        content: "";
        pointer-events: none;
        width: 100%;
        height: 100%;
        position: absolute;
    }

    &:before {
        box-shadow: var(--bottom-shadow);
    }

    &:after {
        box-shadow: var(--top-shadow);
    }



</style>

